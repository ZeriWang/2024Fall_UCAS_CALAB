$date
   Fri Aug 30 22:57:37 2024
$end
$version
  2019.2
$end
$timescale
  1ps
$end
$scope module tb_top $end
$scope module soc_lite $end
$var wire 1 ! resetn $end
$var wire 1 " clk $end
$var wire 16 # led [15:0] $end
$var wire 2 $ led_rg0 [1:0] $end
$var wire 2 % led_rg1 [1:0] $end
$var wire 8 & num_csn [7:0] $end
$var wire 7 ' num_a_g [6:0] $end
$var wire 32 ( num_data [31:0] $end
$var wire 8 ) switch [7:0] $end
$var wire 4 * btn_key_col [3:0] $end
$var wire 4 + btn_key_row [3:0] $end
$var wire 2 , btn_step [1:0] $end
$var wire 32 - debug_wb_pc [31:0] $end
$var wire 4 . debug_wb_rf_we [3:0] $end
$var wire 5 / debug_wb_rf_wnum [4:0] $end
$var wire 32 0 debug_wb_rf_wdata [31:0] $end
$var wire 1 1 cpu_clk $end
$var wire 1 2 timer_clk $end
$var reg 1 3 cpu_resetn $end
$var wire 1 4 cpu_inst_we $end
$var wire 32 5 cpu_inst_addr [31:0] $end
$var wire 32 6 cpu_inst_wdata [31:0] $end
$var wire 32 7 cpu_inst_rdata [31:0] $end
$var wire 1 8 cpu_data_we $end
$var wire 32 9 cpu_data_addr [31:0] $end
$var wire 32 : cpu_data_wdata [31:0] $end
$var wire 32 ; cpu_data_rdata [31:0] $end
$var wire 1 < data_sram_en $end
$var wire 1 = data_sram_we $end
$var wire 32 > data_sram_addr [31:0] $end
$var wire 32 ? data_sram_wdata [31:0] $end
$var wire 32 @ data_sram_rdata [31:0] $end
$var wire 1 A conf_en $end
$var wire 1 B conf_we $end
$var wire 32 C conf_addr [31:0] $end
$var wire 32 D conf_wdata [31:0] $end
$var wire 32 E conf_rdata [31:0] $end
$var parameter 0 F SIMULATION $end
$scope module cpu $end
$var wire 1 1 clk $end
$var wire 1 G resetn $end
$var wire 1 4 inst_sram_we $end
$var wire 32 5 inst_sram_addr [31:0] $end
$var wire 32 6 inst_sram_wdata [31:0] $end
$var wire 32 7 inst_sram_rdata [31:0] $end
$var wire 1 8 data_sram_we $end
$var wire 32 9 data_sram_addr [31:0] $end
$var wire 32 : data_sram_wdata [31:0] $end
$var wire 32 ; data_sram_rdata [31:0] $end
$var wire 32 - debug_wb_pc [31:0] $end
$var wire 4 . debug_wb_rf_we [3:0] $end
$var wire 5 / debug_wb_rf_wnum [4:0] $end
$var wire 32 0 debug_wb_rf_wdata [31:0] $end
$var reg 1 H reset $end
$var reg 1 I valid $end
$var wire 32 J seq_pc [31:0] $end
$var wire 32 K nextpc [31:0] $end
$var wire 1 L br_taken $end
$var wire 32 M br_target [31:0] $end
$var wire 32 N inst [31:0] $end
$var reg 32 O pc [31:0] $end
$var wire 12 P alu_op [11:0] $end
$var wire 1 Q load_op $end
$var wire 1 R src1_is_pc $end
$var wire 1 S src2_is_imm $end
$var wire 1 T res_from_mem $end
$var wire 1 U dst_is_r1 $end
$var wire 1 V gr_we $end
$var wire 1 W mem_we $end
$var wire 1 X src_reg_is_rd $end
$var wire 5 Y dest [4:0] $end
$var wire 32 Z rj_value [31:0] $end
$var wire 32 [ rkd_value [31:0] $end
$var wire 32 \ imm [31:0] $end
$var wire 32 ] br_offs [31:0] $end
$var wire 32 ^ jirl_offs [31:0] $end
$var wire 6 _ op_31_26 [5:0] $end
$var wire 4 ` op_25_22 [3:0] $end
$var wire 2 a op_21_20 [1:0] $end
$var wire 5 b op_19_15 [4:0] $end
$var wire 5 c rd [4:0] $end
$var wire 5 d rj [4:0] $end
$var wire 5 e rk [4:0] $end
$var wire 12 f i12 [11:0] $end
$var wire 20 g i20 [19:0] $end
$var wire 16 h i16 [15:0] $end
$var wire 26 i i26 [25:0] $end
$var wire 64 j op_31_26_d [63:0] $end
$var wire 16 k op_25_22_d [15:0] $end
$var wire 4 l op_21_20_d [3:0] $end
$var wire 32 m op_19_15_d [31:0] $end
$var wire 1 n inst_add_w $end
$var wire 1 o inst_sub_w $end
$var wire 1 p inst_slt $end
$var wire 1 q inst_sltu $end
$var wire 1 r inst_nor $end
$var wire 1 s inst_and $end
$var wire 1 t inst_or $end
$var wire 1 u inst_xor $end
$var wire 1 v inst_slli_w $end
$var wire 1 w inst_srli_w $end
$var wire 1 x inst_srai_w $end
$var wire 1 y inst_addi_w $end
$var wire 1 z inst_ld_w $end
$var wire 1 { inst_st_w $end
$var wire 1 | inst_jirl $end
$var wire 1 } inst_b $end
$var wire 1 ~ inst_bl $end
$var wire 1 !! inst_beq $end
$var wire 1 "! inst_bne $end
$var wire 1 #! inst_lu12i_w $end
$var wire 1 $! need_ui5 $end
$var wire 1 %! need_si12 $end
$var wire 1 &! need_si16 $end
$var wire 1 '! need_si20 $end
$var wire 1 (! need_si26 $end
$var wire 1 )! src2_is_4 $end
$var wire 5 *! rf_raddr1 [4:0] $end
$var wire 32 +! rf_rdata1 [31:0] $end
$var wire 5 ,! rf_raddr2 [4:0] $end
$var wire 32 -! rf_rdata2 [31:0] $end
$var wire 1 .! rf_we $end
$var wire 5 /! rf_waddr [4:0] $end
$var wire 32 0! rf_wdata [31:0] $end
$var wire 32 1! alu_src1 [31:0] $end
$var wire 32 2! alu_src2 [31:0] $end
$var wire 32 3! alu_result [31:0] $end
$var wire 32 4! mem_result [31:0] $end
$var wire 32 5! final_result [31:0] $end
$var wire 1 6! rj_eq_rd $end
$scope module u_dec0 $end
$var wire 6 _ in [5:0] $end
$var wire 64 j out [63:0] $end
$upscope $end
$scope module u_dec1 $end
$var wire 4 ` in [3:0] $end
$var wire 16 k out [15:0] $end
$upscope $end
$scope module u_dec2 $end
$var wire 2 a in [1:0] $end
$var wire 4 l out [3:0] $end
$upscope $end
$scope module u_dec3 $end
$var wire 5 b in [4:0] $end
$var wire 32 m out [31:0] $end
$upscope $end
$scope module u_regfile $end
$var wire 1 1 clk $end
$var wire 5 *! raddr1 [4:0] $end
$var wire 32 +! rdata1 [31:0] $end
$var wire 5 ,! raddr2 [4:0] $end
$var wire 32 -! rdata2 [31:0] $end
$var wire 1 .! we $end
$var wire 5 /! waddr [4:0] $end
$var wire 32 0! wdata [31:0] $end
$upscope $end
$scope module u_alu $end
$var wire 12 P alu_op [11:0] $end
$var wire 32 1! alu_src1 [31:0] $end
$var wire 32 2! alu_src2 [31:0] $end
$var wire 32 3! alu_result [31:0] $end
$var wire 1 7! op_add $end
$var wire 1 8! op_sub $end
$var wire 1 9! op_slt $end
$var wire 1 :! op_sltu $end
$var wire 1 ;! op_and $end
$var wire 1 <! op_nor $end
$var wire 1 =! op_or $end
$var wire 1 >! op_xor $end
$var wire 1 ?! op_sll $end
$var wire 1 @! op_srl $end
$var wire 1 A! op_sra $end
$var wire 1 B! op_lui $end
$var wire 32 C! add_sub_result [31:0] $end
$var wire 32 D! slt_result [31:0] $end
$var wire 32 E! sltu_result [31:0] $end
$var wire 32 F! and_result [31:0] $end
$var wire 32 G! nor_result [31:0] $end
$var wire 32 H! or_result [31:0] $end
$var wire 32 I! xor_result [31:0] $end
$var wire 32 J! lui_result [31:0] $end
$var wire 32 K! sll_result [31:0] $end
$var wire 64 L! sr64_result [63:0] $end
$var wire 32 M! sr_result [31:0] $end
$var wire 32 N! adder_a [31:0] $end
$var wire 32 O! adder_b [31:0] $end
$var wire 1 P! adder_cin $end
$var wire 32 Q! adder_result [31:0] $end
$var wire 1 R! adder_cout $end
$upscope $end
$upscope $end
$scope module inst_ram $end
$var wire 15 S! a [14:0] $end
$var wire 32 6 d [31:0] $end
$var wire 1 1 clk $end
$var wire 1 4 we $end
$var wire 32 7 spo [31:0] $end
$scope module inst $end
$var wire 15 S! a [14:0] $end
$var wire 32 6 d [31:0] $end
$var wire 15 T! dpra [14:0] $end
$var wire 1 1 clk $end
$var wire 1 4 we $end
$var wire 1 U! i_ce $end
$var wire 1 V! qspo_ce $end
$var wire 1 W! qdpo_ce $end
$var wire 1 X! qdpo_clk $end
$var wire 1 Y! qspo_rst $end
$var wire 1 Z! qdpo_rst $end
$var wire 1 [! qspo_srst $end
$var wire 1 \! qdpo_srst $end
$var wire 32 7 spo [31:0] $end
$var wire 32 ]! qspo [31:0] $end
$var wire 32 ^! dpo [31:0] $end
$var wire 32 _! qdpo [31:0] $end
$var wire 15 `! a_int [14:0] $end
$var wire 32 a! d_int [31:0] $end
$var wire 1 b! we_int $end
$var wire 1 c! qspo_ce_int $end
$var wire 1 d! qdpo_clk_int $end
$var wire 15 e! dpra_int [14:0] $end
$var wire 1 f! qdpo_ce_int $end
$var reg 1 g! we_reg $end
$var reg 15 h! a_reg [14:0] $end
$var reg 32 i! d_reg [31:0] $end
$var reg 1 j! qspo_ce_reg $end
$var reg 15 k! dpra_reg [14:0] $end
$var reg 1 l! qdpo_ce_reg $end
$var wire 32 m! spo_int [31:0] $end
$var wire 32 n! dpo_int [31:0] $end
$var reg 32 o! qspo_int [31:0] $end
$var reg 32 p! qspo_pipe [31:0] $end
$var reg 32 q! qdpo_int [31:0] $end
$var reg 32 r! qdpo_pipe [31:0] $end
$var reg 32 s! default_data [31:0] $end
$var wire 32 t! data_sp [31:0] $end
$var wire 32 u! data_dp [31:0] $end
$var wire 32 v! data_sp_over [31:0] $end
$var wire 32 w! data_dp_over [31:0] $end
$var wire 15 x! a_over [14:0] $end
$var wire 15 y! dpra_over [14:0] $end
$var wire 1 z! a_is_over $end
$var wire 1 {! dpra_is_over $end
$var reg 15 |! max_address [14:0] $end
$var integer 32 }! i $end
$var integer 32 ~! j $end
$var parameter 48 !" C_FAMILY [47:0] $end
$var parameter 32 "" C_ADDR_WIDTH [31:0] $end
$var parameter 8 #" C_DEFAULT_DATA [7:0] $end
$var parameter 16 $" C_ELABORATION_DIR [15:0] $end
$var parameter 32 %" C_DEPTH [31:0] $end
$var parameter 32 &" C_HAS_CLK [31:0] $end
$var parameter 32 '" C_HAS_D [31:0] $end
$var parameter 32 (" C_HAS_DPO [31:0] $end
$var parameter 32 )" C_HAS_DPRA [31:0] $end
$var parameter 32 *" C_HAS_I_CE [31:0] $end
$var parameter 32 +" C_HAS_QDPO [31:0] $end
$var parameter 32 ," C_HAS_QDPO_CE [31:0] $end
$var parameter 32 -" C_HAS_QDPO_CLK [31:0] $end
$var parameter 32 ." C_HAS_QDPO_RST [31:0] $end
$var parameter 32 /" C_HAS_QDPO_SRST [31:0] $end
$var parameter 32 0" C_HAS_QSPO [31:0] $end
$var parameter 32 1" C_HAS_QSPO_CE [31:0] $end
$var parameter 32 2" C_HAS_QSPO_RST [31:0] $end
$var parameter 32 3" C_HAS_QSPO_SRST [31:0] $end
$var parameter 32 4" C_HAS_SPO [31:0] $end
$var parameter 32 5" C_HAS_WE [31:0] $end
$var parameter 96 6" C_MEM_INIT_FILE [95:0] $end
$var parameter 32 7" C_MEM_TYPE [31:0] $end
$var parameter 32 8" C_PIPELINE_STAGES [31:0] $end
$var parameter 32 9" C_QCE_JOINED [31:0] $end
$var parameter 32 :" C_QUALIFY_WE [31:0] $end
$var parameter 32 ;" C_READ_MIF [31:0] $end
$var parameter 32 <" C_REG_A_D_INPUTS [31:0] $end
$var parameter 32 =" C_REG_DPRA_INPUT [31:0] $end
$var parameter 32 >" C_SYNC_ENABLE [31:0] $end
$var parameter 32 ?" C_WIDTH [31:0] $end
$var parameter 32 @" C_PARSER_TYPE [31:0] $end
$scope function binstr_conv $end
$var reg 32 A" binstr_conv [31:0] $end
$var reg 256 B" def_data [255:0] $end
$var integer 32 C" index $end
$var integer 32 D" i $end
$upscope $end
$upscope $end
$upscope $end
$scope module bridge_1x2 $end
$var wire 1 1 clk $end
$var wire 1 E" resetn $end
$var wire 1 8 cpu_data_we $end
$var wire 32 9 cpu_data_addr [31:0] $end
$var wire 32 : cpu_data_wdata [31:0] $end
$var wire 32 ; cpu_data_rdata [31:0] $end
$var wire 1 < data_sram_en $end
$var wire 1 = data_sram_we $end
$var wire 32 > data_sram_addr [31:0] $end
$var wire 32 ? data_sram_wdata [31:0] $end
$var wire 32 @ data_sram_rdata [31:0] $end
$var wire 1 A conf_en $end
$var wire 1 B conf_we $end
$var wire 32 C conf_addr [31:0] $end
$var wire 32 D conf_wdata [31:0] $end
$var wire 32 E conf_rdata [31:0] $end
$var wire 1 F" sel_sram $end
$var wire 1 G" sel_conf $end
$upscope $end
$scope module data_ram $end
$var wire 10 H" a [9:0] $end
$var wire 32 ? d [31:0] $end
$var wire 1 1 clk $end
$var wire 1 I" we $end
$var wire 32 @ spo [31:0] $end
$scope module inst $end
$var wire 10 H" a [9:0] $end
$var wire 32 ? d [31:0] $end
$var wire 10 J" dpra [9:0] $end
$var wire 1 1 clk $end
$var wire 1 I" we $end
$var wire 1 K" i_ce $end
$var wire 1 L" qspo_ce $end
$var wire 1 M" qdpo_ce $end
$var wire 1 N" qdpo_clk $end
$var wire 1 O" qspo_rst $end
$var wire 1 P" qdpo_rst $end
$var wire 1 Q" qspo_srst $end
$var wire 1 R" qdpo_srst $end
$var wire 32 @ spo [31:0] $end
$var wire 32 S" qspo [31:0] $end
$var wire 32 T" dpo [31:0] $end
$var wire 32 U" qdpo [31:0] $end
$var wire 10 V" a_int [9:0] $end
$var wire 32 W" d_int [31:0] $end
$var wire 1 X" we_int $end
$var wire 1 Y" qspo_ce_int $end
$var wire 1 Z" qdpo_clk_int $end
$var wire 10 [" dpra_int [9:0] $end
$var wire 1 \" qdpo_ce_int $end
$var reg 1 ]" we_reg $end
$var reg 10 ^" a_reg [9:0] $end
$var reg 32 _" d_reg [31:0] $end
$var reg 1 `" qspo_ce_reg $end
$var reg 10 a" dpra_reg [9:0] $end
$var reg 1 b" qdpo_ce_reg $end
$var wire 32 c" spo_int [31:0] $end
$var wire 32 d" dpo_int [31:0] $end
$var reg 32 e" qspo_int [31:0] $end
$var reg 32 f" qspo_pipe [31:0] $end
$var reg 32 g" qdpo_int [31:0] $end
$var reg 32 h" qdpo_pipe [31:0] $end
$var reg 32 i" default_data [31:0] $end
$var wire 32 j" data_sp [31:0] $end
$var wire 32 k" data_dp [31:0] $end
$var wire 32 l" data_sp_over [31:0] $end
$var wire 32 m" data_dp_over [31:0] $end
$var wire 10 n" a_over [9:0] $end
$var wire 10 o" dpra_over [9:0] $end
$var wire 1 p" a_is_over $end
$var wire 1 q" dpra_is_over $end
$var reg 10 r" max_address [9:0] $end
$var integer 32 s" i $end
$var integer 32 t" j $end
$var parameter 48 u" C_FAMILY [47:0] $end
$var parameter 32 v" C_ADDR_WIDTH [31:0] $end
$var parameter 8 w" C_DEFAULT_DATA [7:0] $end
$var parameter 16 x" C_ELABORATION_DIR [15:0] $end
$var parameter 32 y" C_DEPTH [31:0] $end
$var parameter 32 z" C_HAS_CLK [31:0] $end
$var parameter 32 {" C_HAS_D [31:0] $end
$var parameter 32 |" C_HAS_DPO [31:0] $end
$var parameter 32 }" C_HAS_DPRA [31:0] $end
$var parameter 32 ~" C_HAS_I_CE [31:0] $end
$var parameter 32 !# C_HAS_QDPO [31:0] $end
$var parameter 32 "# C_HAS_QDPO_CE [31:0] $end
$var parameter 32 ## C_HAS_QDPO_CLK [31:0] $end
$var parameter 32 $# C_HAS_QDPO_RST [31:0] $end
$var parameter 32 %# C_HAS_QDPO_SRST [31:0] $end
$var parameter 32 &# C_HAS_QSPO [31:0] $end
$var parameter 32 '# C_HAS_QSPO_CE [31:0] $end
$var parameter 32 (# C_HAS_QSPO_RST [31:0] $end
$var parameter 32 )# C_HAS_QSPO_SRST [31:0] $end
$var parameter 32 *# C_HAS_SPO [31:0] $end
$var parameter 32 +# C_HAS_WE [31:0] $end
$var parameter 144 ,# C_MEM_INIT_FILE [143:0] $end
$var parameter 32 -# C_MEM_TYPE [31:0] $end
$var parameter 32 .# C_PIPELINE_STAGES [31:0] $end
$var parameter 32 /# C_QCE_JOINED [31:0] $end
$var parameter 32 0# C_QUALIFY_WE [31:0] $end
$var parameter 32 1# C_READ_MIF [31:0] $end
$var parameter 32 2# C_REG_A_D_INPUTS [31:0] $end
$var parameter 32 3# C_REG_DPRA_INPUT [31:0] $end
$var parameter 32 4# C_SYNC_ENABLE [31:0] $end
$var parameter 32 5# C_WIDTH [31:0] $end
$var parameter 32 6# C_PARSER_TYPE [31:0] $end
$scope function binstr_conv $end
$var reg 32 7# binstr_conv [31:0] $end
$var reg 256 8# def_data [255:0] $end
$var integer 32 9# index $end
$var integer 32 :# i $end
$upscope $end
$upscope $end
$upscope $end
$scope module u_confreg $end
$var wire 1 1 clk $end
$var wire 1 2 timer_clk $end
$var wire 1 ;# resetn $end
$var wire 1 A conf_en $end
$var wire 1 B conf_we $end
$var wire 32 C conf_addr [31:0] $end
$var wire 32 D conf_wdata [31:0] $end
$var wire 32 E conf_rdata [31:0] $end
$var wire 16 # led [15:0] $end
$var wire 2 $ led_rg0 [1:0] $end
$var wire 2 % led_rg1 [1:0] $end
$var reg 8 <# num_csn [7:0] $end
$var reg 7 =# num_a_g [6:0] $end
$var reg 32 ># num_data [31:0] $end
$var wire 8 ) switch [7:0] $end
$var wire 4 * btn_key_col [3:0] $end
$var wire 4 + btn_key_row [3:0] $end
$var wire 2 , btn_step [1:0] $end
$var reg 32 ?# cr0 [31:0] $end
$var reg 32 @# cr1 [31:0] $end
$var reg 32 A# cr2 [31:0] $end
$var reg 32 B# cr3 [31:0] $end
$var reg 32 C# cr4 [31:0] $end
$var reg 32 D# cr5 [31:0] $end
$var reg 32 E# cr6 [31:0] $end
$var reg 32 F# cr7 [31:0] $end
$var reg 32 G# led_data [31:0] $end
$var reg 32 H# led_rg0_data [31:0] $end
$var reg 32 I# led_rg1_data [31:0] $end
$var wire 32 J# switch_data [31:0] $end
$var wire 32 K# sw_inter_data [31:0] $end
$var wire 32 L# btn_key_data [31:0] $end
$var wire 32 M# btn_step_data [31:0] $end
$var reg 8 N# confreg_uart_data [7:0] $end
$var reg 1 O# confreg_uart_valid $end
$var reg 32 P# timer_r2 [31:0] $end
$var reg 32 Q# simu_flag [31:0] $end
$var reg 32 R# io_simu [31:0] $end
$var reg 8 S# virtual_uart_data [7:0] $end
$var reg 1 T# open_trace $end
$var reg 1 U# num_monitor $end
$var wire 1 V# conf_write $end
$var wire 1 W# write_cr0 $end
$var wire 1 X# write_cr1 $end
$var wire 1 Y# write_cr2 $end
$var wire 1 Z# write_cr3 $end
$var wire 1 [# write_cr4 $end
$var wire 1 \# write_cr5 $end
$var wire 1 ]# write_cr6 $end
$var wire 1 ^# write_cr7 $end
$var reg 1 _# write_timer_begin $end
$var reg 1 `# write_timer_begin_r1 $end
$var reg 1 a# write_timer_begin_r2 $end
$var reg 1 b# write_timer_begin_r3 $end
$var reg 1 c# write_timer_end_r1 $end
$var reg 1 d# write_timer_end_r2 $end
$var reg 32 e# conf_wdata_r [31:0] $end
$var reg 32 f# conf_wdata_r1 [31:0] $end
$var reg 32 g# conf_wdata_r2 [31:0] $end
$var reg 32 h# timer_r1 [31:0] $end
$var reg 32 i# timer [31:0] $end
$var wire 1 j# write_timer $end
$var wire 1 k# write_io_simu $end
$var wire 1 l# write_open_trace $end
$var wire 1 m# write_num_monitor $end
$var wire 8 n# write_uart_data [7:0] $end
$var wire 1 o# write_uart_valid $end
$var wire 1 p# write_led $end
$var reg 16 q# btn_key_r [15:0] $end
$var reg 3 r# state [2:0] $end
$var wire 3 s# next_state [2:0] $end
$var reg 1 t# key_flag $end
$var reg 20 u# key_count [19:0] $end
$var reg 4 v# state_count [3:0] $end
$var wire 1 w# key_start $end
$var wire 1 x# key_end $end
$var wire 1 y# key_sample $end
$var wire 16 z# btn_key_tmp [15:0] $end
$var reg 1 {# btn_step0_r $end
$var reg 1 |# btn_step1_r $end
$var reg 1 }# step0_flag $end
$var reg 20 ~# step0_count [19:0] $end
$var wire 1 !$ step0_start $end
$var wire 1 "$ step0_end $end
$var wire 1 #$ step0_sample $end
$var reg 1 $$ step1_flag $end
$var reg 20 %$ step1_count [19:0] $end
$var wire 1 &$ step1_start $end
$var wire 1 '$ step1_end $end
$var wire 1 ($ step1_sample $end
$var wire 1 )$ write_led_rg0 $end
$var wire 1 *$ write_led_rg1 $end
$var wire 1 +$ write_num $end
$var reg 20 ,$ count [19:0] $end
$var reg 4 -$ scan_data [3:0] $end
$var parameter 0 .$ SIMULATION $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0!
x!!
b11000010111001001110100011010010111100000110111 !"
b0 !#
0!$
0"
x"!
b1111 ""
b0 "#
x"$
bx #
x#!
b110000 #"
b0 ##
x#$
bx $
x$!
b10111000101111 $"
b0 $#
x$$
bx %
x%!
b1000000000000000 %"
b0 %#
bx %$
bx &
x&!
b1 &"
b0 &#
0&$
bx '
x'!
b1 '"
b0 '#
x'$
bx (
x(!
b0 ("
b0 (#
x($
b11111111 )
x)!
b0 )"
b0 )#
x)$
bx *
bx *!
b0 *"
b1 *#
x*$
b0 +
bx +!
b0 +"
b1 +#
x+$
b11 ,
bx ,!
b0 ,"
b11011100110111101011111011000110110111101100101010111110110011001101001011011000110010101011111011011000110111101100001011001000110010101100100 ,#
bx ,$
bx -
bx -!
b0 -"
b1 -#
bx -$
bx .
x.!
b0 ."
b0 .#
1.$
bx /
bx /!
b0 /"
b0 /#
bx 0
bx 0!
b0 0"
b0 0#
01
bx 1!
b0 1"
b0 1#
02
bx 2!
b0 2"
b0 2#
x3
bx 3!
b0 3"
b0 3#
04
bx 4!
b1 4"
b1 4#
bx 5
bx 5!
b1 5"
b100000 5#
b0 6
x6!
b11010010110111001110011011101000101111101110010011000010110110100101110011011010110100101100110 6"
b1 6#
bx 7
x7!
b1 7"
b0 7#
x8
x8!
b0 8"
b0 8#
bx 9
x9!
b0 9"
b10 9#
bx :
x:!
b0 :"
b11111111111111111111111111111110 :#
bx ;
x;!
b1 ;"
x;#
x<
x<!
b0 <"
bx <#
x=
x=!
b0 ="
bx =#
bx >
x>!
b1 >"
bx >#
bx ?
x?!
b100000 ?"
bx ?#
bx @
x@!
b1 @"
bx @#
xA
xA!
b0 A"
bx A#
xB
xB!
b0 B"
bx B#
bx C
bx C!
b10 C"
bx C#
bx D
b0x D!
b11111111111111111111111111111110 D"
bx D#
bx E
b0x E!
xE"
bx E#
1F
bx F!
xF"
bx F#
xG
bx G!
xG"
bx G#
xH
bx H!
bx H"
bx H#
xI
bx I!
xI"
bx I#
bx J
bx J!
b0 J"
b11111111 J#
bx K
bx K!
1K"
b1010101010101010 K#
xL
bx L!
1L"
b0xxxxxxxxxxxxxxxx L#
bx M
bx M!
1M"
b0xx M#
bx N
bx N!
0N"
bx N#
bx O
bx O!
0O"
xO#
bx P
xP!
0P"
bx P#
zQ
bx Q!
0Q"
bx Q#
xR
xR!
0R"
bx R#
xS
bx S!
bx S"
bx S#
xT
b0 T!
bx T"
xT#
xU
1U!
bx U"
xU#
xV
1V!
bx V"
xV#
xW
1W!
bx W"
xW#
xX
0X!
xX"
xX#
bx Y
0Y!
0Y"
xY#
bx Z
0Z!
0Z"
xZ#
bx [
0[!
b0 ["
x[#
bx \
0\!
0\"
x\#
bx00 ]
bx ]!
0]"
x]#
bx00 ^
bx ^!
b0 ^"
x^#
bx _
bx _!
b0 _"
x_#
bx `
bx `!
0`"
x`#
bx a
b0 a!
b0 a"
xa#
bx b
0b!
0b"
xb#
bx c
0c!
bx c"
xc#
bx d
0d!
bx d"
xd#
bx e
b0 e!
b0 e"
bx e#
bx f
0f!
b0 f"
bx f#
bx g
0g!
b0 g"
bx g#
bx h
b0 h!
b0 h"
bx h#
bx i
b0 i!
b0 i"
bx i#
bx j
0j!
bx j"
xj#
bx k
b0 k!
b0 k"
xk#
bx l
0l!
bx l"
xl#
bx m
bx m!
bx m"
xm#
xn
bx n!
bx n"
bx n#
xo
b0 o!
b0 o"
xo#
xp
b0 p!
xp"
xp#
xq
b0 q!
0q"
bx q#
xr
b0 r!
b1111111111 r"
bx r#
xs
b0 s!
b10000000000 s"
bx s#
xt
bx t!
bx t"
xt#
xu
b10101111111111110000001100 u!
b11000010111001001110100011010010111100000110111 u"
bx u#
xv
bx v!
b1010 v"
bx v#
xw
bx w!
b110000 w"
xw#
xx
bx x!
b10111000101111 x"
0x#
xy
b0 y!
b10000000000 y"
xy#
xz
xz!
b1 z"
b0 z#
x{
0{!
b1 {"
x{#
x|
b111111111111111 |!
b0 |"
x|#
x}
b1000000000000000 }!
b0 }"
x}#
x~
bx ~!
b0 ~"
bx ~#
$end
#5000
1"
x.!
11
12
03
x8
0;#
0E"
0G
1I
xL
#5100
x]"
bx ^"
bx _"
1`"
bx e"
bx f"
bx h!
1j!
bx o!
bx p!
#10000
0"
01
02
#15000
1"
0"$
b0 #
0#$
b0 $
0$$
b0 %
b0 %$
b11111111 &
b0 '
0'$
b0 (
0($
b0 *
b0 ,$
b0 -$
11
12
b11111111 <#
b0 =#
b0 >#
b0 ?#
b0 @#
b0 A#
b0 B#
b0 C#
b0 D#
bx E
b0 E#
b0 F#
b0 G#
1H
b0 H#
b0 I#
b0 L#
b0 M#
b0 N#
0O#
b11111111111111111111111111111111 Q#
b0 R#
b0 S#
1T#
1U#
0_#
b0 i#
b0 q#
b0 r#
b0 s#
0t#
b0 u#
b0 v#
1w#
0y#
1{#
1|#
0}#
b0 ~#
#20000
0"
01
02
#25000
0!!
1"
0"!
0#!
0$!
0%!
0&!
0'!
0(!
0)!
0)$
b0 *!
0*$
b0 +!
0+$
b0 ,!
b11011111111111111111111111100 -
b0 -!
b0 .
0.!
b0 /
b0 /!
b0 0
b0 0!
11
b0 1!
12
b0 2!
b0 3!
b0 4!
b11011111111111111111111111100 5
b0 5!
16!
b0 7
07!
08
08!
b0 9
09!
b0 :
0:!
b0 ;
0;!
1<
0<!
0=
0=!
b0 >
0>!
b0 ?
0?!
b0 @
0@!
0A
0A!
0B
0B!
b0 C
b0 C!
b0 D
b0 D!
b0 E
b1 E!
b0 F!
1F"
b11111111111111111111111111111111 G!
0G"
b0 H!
b0 H"
0I
b0 I!
0I"
b11100000000000000000000000000 J
b0 J!
b11100000000000000000000000000 K
b0 K!
0L
b0 L!
b0 M
b0 M!
b0 N
b0 N!
b11011111111111111111111111100 O
b0 O!
b0 P
0P!
b0 Q!
0R
0R!
0S
b111111111111111 S!
0T
0U
1V
b0 V"
0V#
0W
b0 W"
0W#
0X
0X"
0X#
b0 Y
0Y#
b0 Z
0Z#
b0 [
0[#
b0 \
0\#
b0 ]
0]#
b0 ^
0^#
b0 _
b0 `
b111111111111111 `!
0`#
b0 a
b0 b
b0 c
b0 c"
b0 d
b0 e
b0 f
b0 g
b0 h
b0 h#
b0 i
b1 j
b0 j"
0j#
b1 k
0k#
b1 l
0l#
b1 m
b0 m!
0m#
0n
b0 n"
b0 n#
0o
0o#
0p
0p"
0p#
0q
0r
0s
0t
b0 t!
0u
0v
0w
0x
b111111111111111 x!
0y
0z
0z!
0{
0|
0}
0~
#30000
0"
01
02
#35000
1"
11
12
b0 E
b0 P#
0a#
#35100
0]"
b0 ^"
b0 _"
b0 e"
b0 f"
b111111111111111 h!
b0 o!
b0 p!
#40000
0"
01
02
#45000
1"
11
12
0b#
0c#
#50000
0"
01
02
#55000
1"
11
12
0d#
#60000
0"
01
02
#65000
1"
11
12
#70000
0"
01
02
#75000
1"
11
12
#80000
0"
01
02
#85000
1"
11
12
#90000
0"
01
02
#95000
1"
11
12
#100000
0"
01
02
#105000
1"
11
12
#110000
0"
01
02
#115000
1"
11
12
#120000
0"
01
02
#125000
1"
11
12
#130000
0"
01
02
#135000
1"
11
12
#140000
0"
01
02
#145000
1"
11
12
#150000
0"
01
02
#155000
1"
11
12
#160000
0"
01
02
#165000
1"
11
12
#170000
0"
01
02
#175000
1"
11
12
#180000
0"
01
02
#185000
1"
11
12
#190000
0"
01
02
#195000
1"
11
12
#200000
0"
01
02
#205000
1"
11
12
#210000
0"
01
02
#215000
1"
11
12
#220000
0"
01
02
#225000
1"
11
12
#230000
0"
01
02
#235000
1"
11
12
#240000
0"
01
02
#245000
1"
11
12
#250000
0"
01
02
#255000
1"
11
12
#260000
0"
01
02
#265000
1"
11
12
#270000
0"
01
02
#275000
1"
11
12
#280000
0"
01
02
#285000
1"
11
12
#290000
0"
01
02
#295000
1"
11
12
#300000
0"
01
02
#305000
1"
11
12
#310000
0"
01
02
#315000
1"
11
12
#320000
0"
01
02
#325000
1"
11
12
#330000
0"
01
02
#335000
1"
11
12
#340000
0"
01
02
#345000
1"
11
12
#350000
0"
01
02
#355000
1"
11
12
#360000
0"
01
02
#365000
1"
11
12
#370000
0"
01
02
#375000
1"
11
12
#380000
0"
01
02
#385000
1"
11
12
#390000
0"
01
02
#395000
1"
11
12
#400000
0"
01
02
#405000
1"
11
12
#410000
0"
01
02
#415000
1"
11
12
#420000
0"
01
02
#425000
1"
11
12
#430000
0"
01
02
#435000
1"
11
12
#440000
0"
01
02
#445000
1"
11
12
#450000
0"
01
02
#455000
1"
11
12
#460000
0"
01
02
#465000
1"
11
12
#470000
0"
01
02
#475000
1"
11
12
#480000
0"
01
02
#485000
1"
11
12
#490000
0"
01
02
#495000
1"
11
12
#500000
0"
01
02
#505000
1"
11
12
#510000
0"
01
02
#515000
1"
11
12
#520000
0"
01
02
#525000
1"
11
12
#530000
0"
01
02
#535000
1"
11
12
#540000
0"
01
02
#545000
1"
11
12
#550000
0"
01
02
#555000
1"
11
12
#560000
0"
01
02
#565000
1"
11
12
#570000
0"
01
02
#575000
1"
11
12
#580000
0"
01
02
#585000
1"
11
12
#590000
0"
01
02
#595000
1"
11
12
#600000
0"
01
02
#605000
1"
11
12
#610000
0"
01
02
#615000
1"
11
12
#620000
0"
01
02
#625000
1"
11
12
#630000
0"
01
02
#635000
1"
11
12
#640000
0"
01
02
#645000
1"
11
12
#650000
0"
01
02
#655000
1"
11
12
#660000
0"
01
02
#665000
1"
11
12
#670000
0"
01
02
#675000
1"
11
12
#680000
0"
01
02
#685000
1"
11
12
#690000
0"
01
02
#695000
1"
11
12
#700000
0"
01
02
#705000
1"
11
12
#710000
0"
01
02
#715000
1"
11
12
#720000
0"
01
02
#725000
1"
11
12
#730000
0"
01
02
#735000
1"
11
12
#740000
0"
01
02
#745000
1"
11
12
#750000
0"
01
02
#755000
1"
11
12
#760000
0"
01
02
#765000
1"
11
12
#770000
0"
01
02
#775000
1"
11
12
#780000
0"
01
02
#785000
1"
11
12
#790000
0"
01
02
#795000
1"
11
12
#800000
0"
01
02
#805000
1"
11
12
#810000
0"
01
02
#815000
1"
11
12
#820000
0"
01
02
#825000
1"
11
12
#830000
0"
01
02
#835000
1"
11
12
#840000
0"
01
02
#845000
1"
11
12
#850000
0"
01
02
#855000
1"
11
12
#860000
0"
01
02
#865000
1"
11
12
#870000
0"
01
02
#875000
1"
11
12
#880000
0"
01
02
#885000
1"
11
12
#890000
0"
01
02
#895000
1"
11
12
#900000
0"
01
02
#905000
1"
11
12
#910000
0"
01
02
#915000
1"
11
12
#920000
0"
01
02
#925000
1"
11
12
#930000
0"
01
02
#935000
1"
11
12
#940000
0"
01
02
#945000
1"
11
12
#950000
0"
01
02
#955000
1"
11
12
#960000
0"
01
02
#965000
1"
11
12
#970000
0"
01
02
#975000
1"
11
12
#980000
0"
01
02
#985000
1"
11
12
#990000
0"
01
02
#995000
1"
11
12
